comport='com 10'

import serial
import time
import cv2 as cv
import sys
import numpy as np
import os.path
from time import sleep
import os
confThreshold = 0.5  
nmsThreshold = 0.4   
iWidth = 416       
iHeight = 416 

import cv2

   
file="10.jpg"
#file=input("Enter your image file name: ")

classesFile = "coco.names"
classes = None
with open(classesFile, 'rt') as f:
    classes = f.read().rstrip('\n').split('\n')


mC = "model.cfg"
mW = "model.weights"

net = cv.dnn.readNetFromDarknet(mC, mW)


net.setPreferableBackend(cv.dnn.DNN_BACKEND_OPENCV)
net.setPreferableTarget(cv.dnn.DNN_TARGET_CPU)



def getOutputsNames(net):
    # Get the names of all the layers in the network
    layersNames = net.getLayerNames()
    # Get the names of the output layers, i.e. the layers with unconnected outputs
    return [layersNames[i - 1] for i in net.getUnconnectedOutLayers()]

def drawPred(classId, conf, left, top, right, bottom):
    # Draw a bounding box.
    cv.rectangle(frame, (left, top), (right, bottom), (255, 178, 50), 3)
    
    label = '%.2f' % conf
        

    if classes:
        assert(classId < len(classes))
        label = '%s:%s' % (classes[classId], label)
        print(label)
    



    labelSize, baseLine = cv.getTextSize(label, cv.FONT_HERSHEY_SIMPLEX, 0.5, 1)
    top = max(top, labelSize[1])
    cv.rectangle(frame, (left, top - round(1.5*labelSize[1])), (left + round(1.5*labelSize[0]), top + baseLine), (255, 255, 255), cv.FILLED)
    cv.putText(frame, label, (left, top), cv.FONT_HERSHEY_SIMPLEX, 0.75, (0,0,0), 1)
    hardser=serial.Serial(comport,9600)
    if(classId>13 and classId<24 ):
        for i in range(3):
            hardser.write(label.encode()) 
            time.sleep(1)
    hardser.close()

def postprocess(frame, outs):
    frameHeight = frame.shape[0]
    frameWidth = frame.shape[1]


    classIds = []
    confidences = []
    boxes = []
    for out in outs:
        for detection in out:
            scores = detection[5:]
            classId = np.argmax(scores)
            confidence = scores[classId]
            if confidence > confThreshold:
                center_x = int(detection[0] * frameWidth)
                center_y = int(detection[1] * frameHeight)
                width = int(detection[2] * frameWidth)
                height = int(detection[3] * frameHeight)
                left = int(center_x - width / 2)
                top = int(center_y - height / 2)
                classIds.append(classId)
                sleep(0.03)
                confidences.append(float(confidence))
                boxes.append([left, top, width, height])
    

                




    indices = cv.dnn.NMSBoxes(boxes, confidences, confThreshold, nmsThreshold)
    for i in indices:
        box = boxes[i]
        left = box[0]
        top = box[1]
        width = box[2]
        height = box[3]
        drawPred(classIds[i], confidences[i], left, top, left + width, top + height)
        



cap = cv.VideoCapture(file)
outputFile = "./detection/"+file[:-4]+'_outv3.jpg'



while cv.waitKey(1) < 0:
    
    hasFrame, frame = cap.read()
    
    if not hasFrame:
        print("Done processing !!!")
        print("Output file is stored as ", outputFile)
        cv.waitKey(3000)
        cv.destroyAllWindows()
        cap.release()
        break

    frame=cv.resize(frame,(800,600))
 
    blob = cv.dnn.blobFromImage(frame, 1/255, (iWidth, iHeight), [0,0,0], 1, crop=False)

 
    net.setInput(blob)

    outs = net.forward(getOutputsNames(net))

    postprocess(frame, outs)

    
    t, _ = net.getPerfProfile()
    label = 'Inference time: %.2f ms' % (t * 1000.0 / cv.getTickFrequency())
    cv.rectangle(frame, (0, 0), (0 + 250, 0 +18), (0,255,0), -1)

    cv.putText(frame, label, (0, 15), cv.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0))

  
    cv.imwrite(outputFile, frame.astype(np.uint8))
   
    w = 'RESULT'
    cv.namedWindow(w,flags=cv.WINDOW_AUTOSIZE)

    cv.imshow(w, frame)
    cv2.waitKey(0)
